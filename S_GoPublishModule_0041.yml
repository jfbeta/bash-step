resources:
  - name: S_GoPublishModule_0041_GitRepo_rak
    type: GitRepo
    configuration:
      gitProvider: raksha78_github
      path: raksha78/bash-step
      branches:
        include: main

  - name: S_GoPublishModule_0041_BuildInfo_rak
    type: BuildInfo
    configuration:
      sourceArtifactory: s_artifactory

pipelines:
  - name: pipeline_S_GoPublishModule_0041_rak
    steps:
      - name: S_GoPublishModule_0041_1_rak
        type: GoPublishModule
        configuration:
          integrations:
            - name: s_artifactory
          inputResources:
            - name: S_GoPublishModule_0041_GitRepo_rak
          outputResources:
            - name: S_GoPublishModule_0041_BuildInfo_rak
          version: "v0.41.${run_number}"
          targetRepository: test-automation-go-local
          autoPublishBuildInfo: false
          sourceLocation: "tests/Go"
      - name: S_GoPublishModule_0041_2_rak
        type: Bash
        configuration:
          inputResources:
            - name: S_GoPublishModule_0041_BuildInfo_rak
          integrations:
            - name: s_artifactory
        execution:
          onExecute:
            - buildInfoName=$(jfrog rt curl -XGET "/api/build/${JFROG_CLI_BUILD_NAME}/${JFROG_CLI_BUILD_NUMBER}" | jq -r .buildInfo.name)
            - echo $buildInfoName
            - if [ "$buildInfoName" != "null" ]; then return 1; fi
            - restore_run_files jfrog /tmp/jfrog
            - ls /tmp/jfrog/builds
            - $jfrog_cli_path rt build-publish $JFROG_CLI_BUILD_NAME $JFROG_CLI_BUILD_NUMBER --insecure-tls=$no_verify_ssl
            - moduleId=$(jfrog rt curl -XGET "/api/build/${JFROG_CLI_BUILD_NAME}/${JFROG_CLI_BUILD_NUMBER}" | jq -r .buildInfo.modules[0].id)
            - if [ "$moduleId" != "go.service" ]; then return 1; fi
            - jfrog rt curl -XDELETE "/api/build/${JFROG_CLI_BUILD_NAME}?buildNumbers=${JFROG_CLI_BUILD_NUMBER}&artifacts=1"
